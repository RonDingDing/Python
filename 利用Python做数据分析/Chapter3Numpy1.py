#! /usr/bin/env python
# -*- coding: utf-8 -*-
import numpy as np

# array:    将输入数据（列表、元组、数组或其他序列类型）转换成ndarray，
#           要么推断出dtype，要么显示指定dtype。默认直接复制输入数据
# asarray:   将输入转换为ndarray，如果输入本身就是一个ndarray就不进行复制
# arange:    类似于内置的range，但返回的是一个ndarray而不是列表
# ones       根据指定的形状和dtype创建一个全1数组。ones_like以另一个数组为参数，
# ones_like: 根据其形状和dtype创建一个全1数组
# zeros:     同ones，产生全0数组
# zeros_like:同ones_like，产生全0数组
# empty:     创建新数组，只分配内存空间，不填充任何值
# empty_like:创建新数组，只分配内存空间，不填充任何值
# eye:       创建一个正方的N*N单位矩阵（对角线为1，其余为0）

data1 = [6, 7.5, 8, 0, 1]
arr1 = np.array(data1)

# >>> arr1
# array([ 6. ,  7.5,  8. ,  0. ,  1. ])

# >>> arr1.dtype
# dtype('float64')

data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
arr2 = np.array(data2)

# >>> arr2
# array([[1, 2, 3, 4],
#        [5, 6, 7, 8]])

# >>> arr2.ndim
# 2

# shape: 矩阵形状
# >>> arr2.shape
# (2, 4)

# dtype: 数据类型
# >>> arr2.dtype
# dtype('int32')

# >>> np.zeros(10)
# array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])

# zeros: 按规格生成全是0的矩阵
# >>> np.zeros((3, 6))
# array([[ 0.,  0.,  0.,  0.,  0.,  0.],
#        [ 0.,  0.,  0.,  0.,  0.,  0.],
#        [ 0.,  0.,  0.,  0.,  0.,  0.]])

# empty: 按规格生成乱七八糟的数据
# >>> np.empty((2, 3, 2))
# array([[[  7.51529200e-297,   2.49855030e+262],
#         [  7.04134365e-009,   4.24359863e+175],
#         [  2.31462827e-152,   4.91441927e+252]],
#
#        [[  2.09831152e+214,   8.87707049e+252],
#         [  7.04134408e-009,   1.07218974e+200],
#         [  2.68212788e-110,   2.42766855e-154]]])

# arange: 类似List
# >>> np.arange(15)
# array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])

np.eye(2, 2)
np.eye(4, 4)
np.identity(2)
np.identity(4)

arrrr = np.array([1, 2, 3], dtype=np.float64)
arrrr2 = np.array([1, 2, 3], dtype=np.int32)

# >>> arrrr.dtype
# dtype('float64')
# >>> arrrr2.dtype
# dtype('int32')

ab = np.array([1, 2, 3, 4, 5])

# astype:修改类型
float_arr = ab.astype(np.float64)
# >>> ab.dtype
# dtype('int32')

c = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])
# >>> c
# array([  3.7,  -1.2,  -2.6,   0.5,  12.9,  10.1])
# >>> c.dtype
# dtype('float64')

# >>> c.astype(float)
# array([  3.7,  -1.2,  -2.6,   0.5,  12.9,  10.1])
# >>> c.astype(np.int32)
# array([ 3, -1, -2,  0, 12, 10])

a3 = c.astype(np.float64)
# >>> a3
# array([  3.7,  -1.2,  -2.6,   0.5,  12.9,  10.1])

a4 = a3.astype(np.int32)
# >>> a4
# array([ 3, -1, -2,  0, 12, 10])

numeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_)
# >>> numeric_strings.astype(float)
# array([  1.25,  -9.6 ,  42.  ])


int_array = np.arange(10)
calibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)
int_array.astype(calibers.dtype)
empty_uint32 = np.empty(8, dtype='u4')
# >>> empty_uint32
# array([         0, 1075314688,          0, 1075707904,          0,
#        1075838976,          0, 1072693248], dtype=uint32)


dog = np.array([[1., 2., 3.], [4., 5., 6.]])
# >>> dog * dog
# array([[  1.,   4.,   9.],
#        [ 16.,  25.,  36.]])

# >>> 1 / dog
# array([[ 1.        ,  0.5       ,  0.33333333],
#        [ 0.25      ,  0.2       ,  0.16666667]])
# >>> dog - dog
# array([[ 0.,  0.,  0.],
#        [ 0.,  0.,  0.]])

arr = np.arange(10)
# >>> arr
# array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# >>> arr[5]
# 5
# >>> arr[5:8]
# array([5, 6, 7])

arr[5:8] = 12
# >>> arr
# array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])


arr_slice = arr[5:8]

arr_slice[1] = 12345
# >>> arr_slice
# array([    5, 12345,     7])
arr_slice[:] = 64
# >>> arr
# array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])



arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# >>> arr2d[2]
# array([7, 8, 9])
# >>> arr2d[0][2]
# 3
# >>> arr2d[0, 2]
# 3
# >>> arr2d[1, 1]
# 5
# >>> arr2d[1, 2]
# 6

arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], )
# >>> arr3d
# array([[[ 1,  2,  3],
#         [ 4,  5,  6]],
#
#        [[ 7,  8,  9],
#         [10, 11, 12]]])
# >>> arr3d[0]
# array([[1, 2, 3],
#        [4, 5, 6]])

old_values = arr3d[0].copy()
arr3d[0] = 42
# >>> arr3d
# array([[[42, 42, 42],
#         [42, 42, 42]],
#
#        [[ 7,  8,  9],
#         [10, 11, 12]]])

arr3d[0] = old_values

# >>> arr3d
# array([[[ 1,  2,  3],
#         [ 4,  5,  6]],
#
#        [[ 7,  8,  9],
#         [10, 11, 12]]])
#
# >>> arr3d[1, 0]
# array([7, 8, 9])
#
# >>> arr3d[1, 1]
# array([10, 11, 12])




# >>> arr
# array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])
#
# >>> arr[1:6]
# array([ 1,  2,  3,  4, 64])



# >>> arr2d
# array([[1, 2, 3],
#        [4, 5, 6],
#        [7, 8, 9]])
#
# >>> arr2d[:2]
# array([[1, 2, 3],
#        [4, 5, 6]])
#
# >>> arr2d[:2, 1:]
# array([[2, 3],
#        [5, 6]])
#
# >>> arr2d[1, :2]
# array([4, 5])
#
# >>> arr2d[2, :1]
# array([7])
#
# >>> arr2d[:, :1]
# array([[1],
#        [4],
#        [7]])


arr2d[:2, 1:] = 0
# >>> arr2d
# array([[1, 0, 0],
#        [4, 0, 0],
#        [7, 8, 9]])


names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
# >>> names
# array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'],
#       dtype='|S4')

data = np.random.randn(7, 4)
# >>> data
# array([[ 0.39515887,  0.85784317, -0.49802281,  1.3009575 ],
#        [ 0.82708249, -1.13155773,  1.93094578,  1.64438877],
#        [-0.44446618,  1.28125964, -0.38620713,  0.42499904],
#        [-0.82468565,  1.26881535,  0.88619463,  0.17194536],
#        [-0.02888908, -0.16809927, -0.53503607, -0.9974648 ],
#        [-0.25423323, -0.0975498 ,  1.98309302,  0.09450004],
#        [ 0.62381024,  1.97019235,  0.62345631,  0.38534803]])

# >>> names == 'Bob'
# array([ True, False, False,  True, False, False, False], dtype=bool)

# >>> data[names=='Bob']
# array([[ 0.39515887,  0.85784317, -0.49802281,  1.3009575 ],
#        [-0.82468565,  1.26881535,  0.88619463,  0.17194536]])

# >>> data[names == 'Bob', 2:]
# array([[-0.49802281,  1.3009575 ],
#        [ 0.88619463,  0.17194536]])


# >>> data[names == 'Bob', 3]
# array([ 1.3009575 ,  0.17194536])

# >>> names != 'Bob'
# array([False,  True,  True, False,  True,  True,  True], dtype=bool)

# >>> data[~(names == 'Bob')]
# array([[ 0.82708249, -1.13155773,  1.93094578,  1.64438877],
#        [-0.44446618,  1.28125964, -0.38620713,  0.42499904],
#        [-0.02888908, -0.16809927, -0.53503607, -0.9974648 ],
#        [-0.25423323, -0.0975498 ,  1.98309302,  0.09450004],
#        [ 0.62381024,  1.97019235,  0.62345631,  0.38534803]])

mask = (names == 'Bob') | (names == 'Will')
# >>> mask
# array([ True, False,  True,  True,  True, False, False], dtype=bool)

# >>> data[mask]
# array([[ 0.39515887,  0.85784317, -0.49802281,  1.3009575 ],
#        [-0.44446618,  1.28125964, -0.38620713,  0.42499904],
#        [-0.82468565,  1.26881535,  0.88619463,  0.17194536],
#        [-0.02888908, -0.16809927, -0.53503607, -0.9974648 ]])


data[data < 0] = 0
# >>> data
# array([[ 0.39515887,  0.85784317,  0.        ,  1.3009575 ],
#        [ 0.82708249,  0.        ,  1.93094578,  1.64438877],
#        [ 0.        ,  1.28125964,  0.        ,  0.42499904],
#        [ 0.        ,  1.26881535,  0.88619463,  0.17194536],
#        [ 0.        ,  0.        ,  0.        ,  0.        ],
#        [ 0.        ,  0.        ,  1.98309302,  0.09450004],
#        [ 0.62381024,  1.97019235,  0.62345631,  0.38534803]])

data[names != 'Joe'] = 7
# >>> data
# array([[ 7.        ,  7.        ,  7.        ,  7.        ],
#        [ 0.82708249,  0.        ,  1.93094578,  1.64438877],
#        [ 7.        ,  7.        ,  7.        ,  7.        ],
#        [ 7.        ,  7.        ,  7.        ,  7.        ],
#        [ 7.        ,  7.        ,  7.        ,  7.        ],
#        [ 0.        ,  0.        ,  1.98309302,  0.09450004],
#        [ 0.62381024,  1.97019235,  0.62345631,  0.38534803]])


arr = np.empty((8, 4))
for i in range(8):
    arr[i] = i

# >>> arr
# array([[ 0.,  0.,  0.,  0.],
#        [ 1.,  1.,  1.,  1.],
#        [ 2.,  2.,  2.,  2.],
#        [ 3.,  3.,  3.,  3.],
#        [ 4.,  4.,  4.,  4.],
#        [ 5.,  5.,  5.,  5.],
#        [ 6.,  6.,  6.,  6.],
#        [ 7.,  7.,  7.,  7.]])


# >>> arr[[4,3,0,6]]
# array([[ 4.,  4.,  4.,  4.],
#        [ 3.,  3.,  3.,  3.],
#        [ 0.,  0.,  0.,  0.],
#        [ 6.,  6.,  6.,  6.]])

# >>> arr[[-3,-5, -7]]
# array([[ 5.,  5.,  5.,  5.],
#        [ 3.,  3.,  3.,  3.],
#        [ 1.,  1.,  1.,  1.]])

arr2 = np.arange(32).reshape((8, 4))

# >>> arr2
# array([[ 0,  1,  2,  3],
#        [ 4,  5,  6,  7],
#        [ 8,  9, 10, 11],
#        [12, 13, 14, 15],
#        [16, 17, 18, 19],
#        [20, 21, 22, 23],
#        [24, 25, 26, 27],
#        [28, 29, 30, 31]])

arr3 = np.arange(32)
# >>> arr3
# array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
#        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])


# >>> arr
# array([[ 0.,  0.,  0.,  0.],
#        [ 1.,  1.,  1.,  1.],
#        [ 2.,  2.,  2.,  2.],
#        [ 3.,  3.,  3.,  3.],
#        [ 4.,  4.,  4.,  4.],
#        [ 5.,  5.,  5.,  5.],
#        [ 6.,  6.,  6.,  6.],
#        [ 7.,  7.,  7.,  7.]])

# >>> arr[[1,5,7,2],[0,3,1,2]]
# array([ 1.,  5.,  7.,  2.])


# >>> arr2[[1,5,7,2],[0,3,1,2]]
# array([ 4, 23, 29, 10])


# >>> arr2
# array([[ 0,  1,  2,  3],
#        [ 4,  5,  6,  7],
#        [ 8,  9, 10, 11],
#        [12, 13, 14, 15],
#        [16, 17, 18, 19],
#        [20, 21, 22, 23],
#        [24, 25, 26, 27],
#        [28, 29, 30, 31]])

# >>> arr2[0]
# array([0, 1, 2, 3])

# >>> arr2[[1,5,7,2]][:, [0,3,1,2]]
# array([[ 4,  7,  5,  6],
#        [20, 23, 21, 22],
#        [28, 31, 29, 30],
#        [ 8, 11,  9, 10]])



elephant = np.arange(15).reshape((3, 5))
# >>> elephant
# array([[ 0,  1,  2,  3,  4],
#        [ 5,  6,  7,  8,  9],
#        [10, 11, 12, 13, 14]])
# >>> elephant.T
# array([[ 0,  5, 10],
#        [ 1,  6, 11],
#        [ 2,  7, 12],
#        [ 3,  8, 13],
#        [ 4,  9, 14]])

# reshape: 按照样式重组数列
narr = np.arange(15).reshape(3, 5)
# >>> narr
# array([[ 0,  1,  2,  3,  4],
#        [ 5,  6,  7,  8,  9],
#        [10, 11, 12, 13, 14]])


# .T 矩阵x,y互换
# >>> narr.T
# array([[ 0,  5, 10],
#        [ 1,  6, 11],
#        [ 2,  7, 12],
#        [ 3,  8, 13],
#        [ 4,  9, 14]])

# dot: 矩阵内积
# dot(narr.T, narr)
# >>> np.dot(narr.T, narr)
# array([[125, 140, 155, 170, 185],
#        [140, 158, 176, 194, 212],
#        [155, 176, 197, 218, 239],
#        [170, 194, 218, 242, 266],
#        [185, 212, 239, 266, 293]])

danies = np.arange(16).reshape((2, 2, 4))
# >>> danies
# array([[[ 0,  1,  2,  3],
#         [ 4,  5,  6,  7]],
#
#        [[ 8,  9, 10, 11],
#         [12, 13, 14, 15]]])

# transpose: 比如4这个元素，在danies[0][1][0]中，
#            给三个index编号0、1、2，transpose是把index换成1、0、2的顺序
#            新的矩阵中4的位置应该是[1][0][0]
# >>> danies.transpose((1,0,2))
# array([[[ 0,  1,  2,  3],
#         [ 8,  9, 10, 11]],
#
#        [[ 4,  5,  6,  7],
#         [12, 13, 14, 15]]])
david = np.arange(16).reshape(4, 4)
# >>> david
# array([[ 0,  1,  2,  3],
#        [ 4,  5,  6,  7],
#        [ 8,  9, 10, 11],
#        [12, 13, 14, 15]])

# >>> david.transpose(0,1) 得到原矩阵
# array([[ 0,  1,  2,  3],
#        [ 4,  5,  6,  7],
#        [ 8,  9, 10, 11],
#        [12, 13, 14, 15]])

# >>> david.transpose(1,0)
# array([[ 0,  4,  8, 12],
#        [ 1,  5,  9, 13],
#        [ 2,  6, 10, 14],
#        [ 3,  7, 11, 15]])


arr = np.arange(16).reshape(2, 2, 2, 2)
# >>> arr
# array([[[[ 0,  1],
#          [ 2,  3]],
#
#         [[ 4,  5],
#          [ 6,  7]]],
#
#
#        [[[ 8,  9],
#          [10, 11]],d
#
#         [[12, 13],
#          [14, 15]]]])

# >>> arr.transpose(1,0,2,3)
# array([[[[ 0,  1],
#          [ 2,  3]],
#
#         [[ 8,  9],
#          [10, 11]]],
#
#
#        [[[ 4,  5],
#          [ 6,  7]],
#
#         [[12, 13],
#          [14, 15]]]])

# >>> arr.transpose(1,0,3,2)
# array([[[[ 0,  2],
#          [ 1,  3]],
#
#         [[ 8, 10],
#          [ 9, 11]]],
#
#
#        [[[ 4,  6],
#          [ 5,  7]],
#
#         [[12, 14],
#          [13, 15]]]])


# >>> arr[0,1,0,1]
# 5
# >>> arr.transpose(1,0,3,2)[1,0,1,0]
# 5

pepo = np.arange(16).reshape(2, 2, 4)
# >>> pepo
# array([[[ 0,  1,  2,  3],
#         [ 4,  5,  6,  7]],
#
#        [[ 8,  9, 10, 11],
#         [12, 13, 14, 15]]])

# swapaxes: 把index原来为0的全部换到1
# >>> pepo.swapaxes(0,1)
# array([[[ 0,  1,  2,  3],
#         [ 8,  9, 10, 11]],
#
#        [[ 4,  5,  6,  7],
#         [12, 13, 14, 15]]])
